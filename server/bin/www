#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');
const DB = require('../db');
const Chat = DB.chat;
const User = DB.user;
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
// app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback());
const io = require('socket.io')(server);

io.on('connection', socket => {
  console.log('socket user login');
  socket.on('chat:one', async data => {
    const { from, to, content, toUserAvatar } = data;
    const chatid = [from, to].sort().join('_');
    const chatDoc = await Chat.create({ chatid, from, to, content, toUserAvatar });
    // const toUserDoc = await User.find({ _id: to }, { password: 0 });
    io.emit('chat:recvmsg', chatDoc);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
}
